# Sources:
#         https://ellis3dp.com/Print-Tuning-Guide


######################################################################
# Homing
######################################################################

[homing_override]
set_position_z: 5
gcode:
 FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=2
 G90
 G28 X
 G90
 G1 X+10
 G28 Y
 G90
 G1 X122.5 Y122.5 F3000
 G28 Z

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[idle_timeout]
gcode:
  {% if printer.pause_resume.is_paused %}
  M117 Idle but paused, maintaining bed temp.
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
  TURN_OFF_HEATERS
  M84
  {% endif %}
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

######################################################################
# Extruder Activation GCode
######################################################################

# Script to activate the first extruder
# printer['toolhead'].extruder
[gcode_macro T0]
gcode:
    SET_DISPLAY_TEXT MSG="Activating extruder 0"
    SET_GCODE_OFFSET X=0 Y=0                       # Clear X offset for E0
    PARKPURGE
    G91
    # retract other
    {% if printer['toolhead'].extruder|lower == 'extruder' %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    {% endif %}
    G1 E-10 F150
    G4 P1500 # wait for ooze
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    G1 E25 F150
    G90
    WIPE_NOZZLE

# Script to activate second extruder
[gcode_macro T1]
gcode:
    SET_DISPLAY_TEXT MSG="Activating extruder 1"
    SET_GCODE_OFFSET X=0 Y=0 
    PARKPURGE
    G91
    # retract other
    {% if printer['toolhead'].extruder|lower == 'extruder1' %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    {% endif %}
    G1 E-10 F150
    G4 P1500 # wait for ooze
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    G1 E25 F150
    G90
    WIPE_NOZZLE
    SET_GCODE_OFFSET X=-14.25 Y=0.1                # Set offset for E1


######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT BED_TEMP={first_layer_bed_temperature[0]} EXTRUDER_TEMP={first_layer_temperature[0]} EXTRUDER1_TEMP={first_layer_temperature[1]}
# END_PRINT.

[gcode_macro START_PRINT]
gcode:
    #########
    # SETUP #
    #########
    SET_DISPLAY_TEXT MSG="Start print routine"
    CLEAR_PAUSE
    G90 # Use absolute coordinates
    SET_GCODE_OFFSET Z=0.0 Y=0.0 X=0.0 # Reset the G-Code offset
    BED_MESH_PROFILE LOAD=default
    ACTIVATE_EXTRUDER EXTRUDER=extruder # activate primary extruder


    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set EXTRUDER1_TEMP = params.EXTRUDER1_TEMP|default(200)|float %}

    ###########
    # PREHEAT #
    ###########
    SET_DISPLAY_TEXT MSG="Preheating..."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={EXTRUDER1_TEMP}

    ########
    # HOME #
    ########
    SET_DISPLAY_TEXT MSG="Homing and parking in purge position..."
    G28
    PARKPURGE

    ########
    # HEAT #
    ########
    SET_DISPLAY_TEXT MSG="Waiting for bed temp..."
    M190 S{BED_TEMP}
    SET_DISPLAY_TEXT MSG="Waiting for T0 temp..."
    M109 T0 S{EXTRUDER_TEMP}
    SET_DISPLAY_TEXT MSG="Waiting for T1 temp..."
    M109 T1 S{EXTRUDER1_TEMP}

    #########
    # PURGE #
    #########
    SET_DISPLAY_TEXT MSG="Purging..."
    PURGE

    ########
    # WIPE #
    ########
    SET_DISPLAY_TEXT MSG="Wiping nozzle..."
    WIPE_NOZZLE
    # T0 # activate primary extruder

[gcode_macro PURGE]
gcode:
    SAVE_GCODE_STATE NAME=PURGE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      G1 E50 F300
      G1 E-1 F300
    {% endif %}
    {% if printer.extruder1.can_extrude|lower == 'true' %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      G1 E50 F300
      G1 E-1 F300
    {% endif %}
    G90
    RESTORE_GCODE_STATE NAME=PURGE

# Wipe the nozzle
[gcode_macro WIPE_NOZZLE]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=WIPE_NOZZLE
    SET_GCODE_OFFSET Z=0.0 Y=0.0 X=0.0
    G90                               ; absolute positioning
    G0 X172.5 Y277.10 F6000             
    G0 X227.5 Y277.10 F6000             
    G0 X172.5 Y277.10 F6000             
    G0 X227.5 Y277.10 F6000     
    G0 X172.5 Y277.10 F6000   
    # G91                               ; relative positioning
    # G0 Z5 F6000     
    RESTORE_GCODE_STATE NAME=WIPE_NOZZLE

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    TURN_OFF_HEATERS
    M106 S0
    # Move nozzle away from print while retracting
    G91 # use relative
    G1 X-2 Y-2 E-5 F300
    WIPE_NOZZLE
    # Lower bed by 5mm
    G1 Z5 F3000
    G90
    # Disable steppers
    M84


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    END_PRINT
    BASE_CANCEL_PRINT

######################################################################
# LAYER CHANGES
######################################################################

[gcode_macro BEFORE_LAYER_CHANGE]
gcode:
    ; BEFORE_LAYER_CHANGE macro
    # PARKPAUSE
    TIMELAPSE_TAKE_FRAME

[gcode_macro AFTER_LAYER_CHANGE]
gcode:
    ; AFTER_LAYER_CHANGE macro

######################################################################
# PAUSE AND RESUME
######################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=e1temp VALUE={printer['extruder1'].target}  ; set hotend temp variable for reference in resume macro

        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                ; disable filament sensor
        # TODO: Install and configure smart filament sensors: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html#smart-filament-sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 T0 S0                                                                           ; turn off hotend
        M104 T1 S0                                                                           ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
variable_e1temp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                            ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        # TODO: Install and configure smart filament sensors: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html#smart-filament-sensor
        # INITIAL_RGB                                                                   ; reset LCD color
        # TODO: Install RGB
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}    ; set timeout back to configured value
        {% if etemp > 0 %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}                  ; wait for hotend to heat back up
        {% endif %}
        {% if e1temp > 0 %}
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={e1temp|int}                ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


######################################################################
# Diagnostic tools
######################################################################

[gcode_macro PSTATUS]
description: Query the printer status via params S1,S2,S3
gcode:
    # https://klipper.discourse.group/t/query-printer-status-information/4188
    {% if params.S3 %}
    {% set info = printer[params.S1][params.S2][params.S3] %}
    {% elif params.S2 %}
    {% set info = printer[params.S1][params.S2] %}
    {% elif params.S1 %}
    {% set info = printer[params.S1] %}
    {% else %}
    {% set info = printer.idle_timeout.state %}
    {% endif %}
    {action_respond_info(info|string)}

[gcode_macro DUMP_VARIABLES]
# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/dump_variables.html#dump-variables
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/get_variable.html#get-variable
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro TOOLHEAD_PARK]
description: Helper: park toolhead in purge position
variable_x_park: 242.5
variable_y_park: 277.1
variable_z_park_delta: 2
variable_retract_distance: 1
gcode:
  ########################
  # Calculate Z Park Hop #
  ########################

  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}

  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  
  ###########
  # Retract #
  ###########

  {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
    M83
    G1 E-{retract_distance} F2100
    {% if printer.gcode_move.absolute_extrude|lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough to retract for park")}
  {% endif %}

  ########
  # Park #
  ########

  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


# [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
# description: Legacy Helper: park toolhead used in PAUSE and CANCEL_PRINT
# variable_extrude: 1.0
# gcode:
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#   {% set z_park_delta = 2.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - z_park_delta) %}
#     {% set z_safe = z_park_delta %}
#   {% else %}
#     {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     M83
#     G1 E-{extrude} F2100
#     {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G91
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#     {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %}